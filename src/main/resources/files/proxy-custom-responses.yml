#      ____             ___          __  _ ______      __
#     / __ \_________  /   |  ____  / /_(_)_  __/___ _/ /_
#    / /_/ / ___/ __ \/ /| | / __ \/ __/ / / / / __ `/ __ \
#   / ____/ /  / /_/ / ___ |/ / / / /_/ / / / / /_/ / /_/ /
#  /_/   /_/   \____/_/  |_/_/ /_/\__/_/ /_/  \__,_/_.___/
#  custom-responses.yml
#
# Here you can configure a few of the blocked commands a bit further.
#  But what exactly is this here? Every command that would normally respond with the typical "command is blocked" message, can be configured in here!
#  And how does it work? It's simple. You just provide the a trigger of the command that would be normally blocked.
#  Commands that would normally work won't send the messages you have set here.
#  This way PAT can offer you full control over certain commands and their normal responses.
# What are these action section at each block?
#  This is an additional feature to make your responses much more alive.
#  Example actions that can be used are the following:
#   Execute console command:
#        Syntax:  console::command
#        Example: console::send %player% fallback
#   Execute player command:
#        Syntax:  execute::command
#        Example: execute::help
#   Send actionbar:
#        Syntax:  actionbar::text
#        Example: actionbar::&cThis is not cool %player%!
#   Send title:
#        Syntax:  title::title::subtitle::5::20::5
#        Example: title::&aTest title::&cHello %player%!

#   Possible variable:
#     %args[from-to]% to get the command arguments
#     Example if you've typed: /shop open gui user
#     %args[1]% = shop
#     %args[2]% = open
#     %args[1-2]% = shop open
#     %args[1-3]% = shop open gui
#     %args[2-4]% = open gui user

# Here are a few examples:

# Example for all blocked commands.
# In here we only trigger this response in any case.
# This applies to all commands, as well as sub-commands,
# unless you have specified another custom response.
#example-with-everything:
#  triggers:
#    - "*"
#  message:
#    - "&cI'm blocked"
#  actions:
#    - "actionbar::&cSorry %player%, but this command is blocked."

# Example with kits.
# In here we only trigger the given message, if the player would type "/kit ...".
# If this command would work through sub-arguments, then the player would only able to execute the command with the
# listed sub-arguments assigned to it. Everything else will result with the set message in there.
# --
#example-with-kits:
#  triggers:
#    - "kit *"
#  message:
#    - "&cThis kit does not exist!"
#  actions:
#    - "actionbar::&cSorry %player%, but this kit does not exist!"

# Here another example with an auctionhouse plugin.
# In here we only trigger the given message, if the player would type "/ah plugin".
# Normally it would print out the "command is blocked" message, because PAT would have blocked it in our case.
# Therefore, we can also assign a custom response message to it.
# ---
#example-with-auctionhouse:
#  triggers:
#    - "ah plugin"
#  message:
#    - "&cThis sub-command does not exist. Please type: &e/ah help"
#  actions:
#    - "console::say That's not nice %player%!"
#    - "title::Hey!::You can't do that %player%!::30::3000::30"
#    - "actionbar::Nop, sorry %player%"