#      ____             ___          __  _ ______      __
#     / __ \_________  /   |  ____  / /_(_)_  __/___ _/ /_
#    / /_/ / ___/ __ \/ /| | / __ \/ __/ / / / / __ `/ __ \
#   / ____/ /  / /_/ / ___ |/ / / / /_/ / / / / /_/ / /_/ /
#  /_/   /_/   \____/_/  |_/_/ /_/\__/_/ /_/  \__,_/_.___/
#  custom-responses.yml
#
# Here you can configure a few of the blocked commands a bit further.
# But what exactly is this here? Every command that would normally respond with the typical "command is blocked" message, can be configured in here!
# But how does it work? It's simple. You just provide the a trigger of the command that would be normally blocked.
# Commands that would normally work won't send the messages you have set here.
# This way PAT can offer you full control over certain commands and their normal responses.
# Here are a few examples:

# Example with kits.
# In here we only trigger the given message, if the player would type "/kit ...".
# If this command would work through sub-arguments, then the player would only able to execute the command with the
# listed sub-arguments assigned to it. Everything else will result with the set message in there.
# --
# example-with-kits:
#   triggers:
#     - "kit *"
#   message:
#     - "&cThis kit does not exist!"

# Here another example with an auctionhouse plugin.
# In here we only trigger the given message, if the player would type "/ah plugin".
# Normally it would print out the "command is blocked" message, because PAT would have blocked it in our case.
# Therefore, we can also assign a custom response message to it.
# ---
# example-with-auctionhouse:
#   triggers:
#     - "ah plugin"
#   message:
#     - "&cThis sub-command does not exist. Please type: &e/ah help"